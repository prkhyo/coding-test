



# <문제> 곱하기 혹은 더하기


# 1. 문제 설명
# 한 마을에 모험가가 N명 있음
# 모험가 길드에서는 N명의 모험가를 대상으로 '공포도'를 측정했는데,
# '공포도'가 높은 모험가는 쉽게 공포를 느껴 위험 상황에서 제대로 대처할 능력이 떨어짐
# 모험가 길드장은 모험가 그룹을 안전하게 구성하고자 공포도가 X인 모험가는 반드시 X명 이상으로
# 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있도록 규정함
# 길드장은 최대 몇 개의 모험가 그룹을 만들 수 있나?
# N명의 모험가에 대한 정보가 주어졌을 때, 여행을 떠날 수 있는 그룹 수의 최댓값을 구하는 프로그램을 작성해라

# 예를 들어, N = 5이고, 각 모험가의 공포도가 다음과 같다고 가정하자
# 2 3 1 2 2
# 이 경우 그룹1에 공포도가 1, 2, 3인 모험가를 한 명씩 넣고, 그룹2에 공포도가 2인 남은 두 명을 넣게 되면
# 총 2개의 그룹을 만들 수 있음
# 또한 몇 명의 모험가는 마을에 그대로 남아 있어도 되기 때문에, 모든 모험가를 특정한 그룹에 넣을 필요는 없음





# 2. 문제 조건
# 난이도 1, 풀이시간 30분, 시간제한 1초, 메모리 제한 128MB
# 입력 조건: 첫째 줄에 모험가의 수 N이 주어짐(1<= N <= 100000)
#           둘째 줄에 각 모험가의 공포도의 값을 N 이하의 자연수로 주어지며, 각 자연수는 공백으로 구분
# 출력 조건: 여행을 떠날 수 있는 그룹의 수의 최댓값을 출력




# 내가 짜본 코드  


n = int(input())
fear = list(map(int,input().split()))
fear.sort()
group = 0
count = 0

for i in fear:
    count += 1
    if i == count:
        count = 0
        group += 1

print(group)        
    
        
    
    



# 3. 문제 해결 아이디어
# 오름차순 정렬 이후 공포도가 가장 낮은 모험가부터 하나씩 확인
# 앞에서부터 공포도를 하나씩 확인하며 '현재 그룹에 포함된 모험가의 수'가 '현재 확인하고 있는 공포도'
# 보다 크거나 같으면 이를 그룹으로 설정
# 이러한 방법을 이용하면 공포도가 오름차순으로 정렬되어 있다는 점에서, 항상 최소한의 모험가의 수만
# 포함하여 그룹을 결성하게 됨.




# 5. 답안 예시  











